{
    "sourceFile": "src/api.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733642461904,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733642461904,
            "name": "Commit-0",
            "content": "import axios from \"axios\";\r\n\r\n// Membuat instance axios dengan konfigurasi dasar\r\nconst api = axios.create({\r\n  baseURL: \"https://be-vote-beta.vercel.app\", // Ganti dengan URL backend yang sesuai\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\n\r\n// Menambahkan token yang disimpan di localStorage ke header Authorization\r\napi.defaults.headers.common[\"Authorization\"] = `Bearer ${localStorage.getItem(\"token\")}`;\r\n\r\n// Fungsi untuk melakukan login dan menyimpan token\r\nexport const loginUser = async (nim) => {\r\n  try {\r\n    const response = await api.post(\"/api/v1/auth/login\", { nim });\r\n\r\n    // Jika login berhasil dan token ada, simpan token ke localStorage\r\n    if (response.data.token) {\r\n      localStorage.setItem(\"token\", response.data.token);\r\n      // Perbarui header Authorization\r\n      api.defaults.headers.common[\"Authorization\"] = `Bearer ${response.data.token}`;\r\n    }\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Login failed:\", error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Fungsi untuk melakukan vote dengan menggunakan token yang ada\r\nexport const submitVote = async ({ nim, candidate }) => {\r\n  try {\r\n    const response = await api.post(\"/api/v1/vote\", { nim, candidate });\r\n\r\n    if (response.status === 200) {\r\n      return response.data;\r\n    }\r\n\r\n    throw new Error(\"Vote gagal.\");\r\n  } catch (error) {\r\n    console.error(\"Error during vote:\", error.message);\r\n    if (error.response?.status === 403) {\r\n      // Jika token expired atau invalid, coba refresh token\r\n      await refreshToken();\r\n      return submitVote({ nim, candidate }); // Coba ulangi permintaan vote setelah token diperbarui\r\n    }\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\n// Fungsi untuk memperbarui token (refresh token)\r\nexport const refreshToken = async () => {\r\n  try {\r\n    const response = await api.post(\"/api/v1/auth/refresh-token\", {}, { withCredentials: true });\r\n    const newAccessToken = response.data.token;\r\n\r\n    // Simpan token baru di localStorage dan perbarui header Authorization\r\n    localStorage.setItem(\"token\", newAccessToken);\r\n    api.defaults.headers.common[\"Authorization\"] = `Bearer ${newAccessToken}`;\r\n\r\n    return newAccessToken;\r\n  } catch (error) {\r\n    console.error(\"Error refreshing token:\", error);\r\n    // Redirect ke halaman login jika refresh token gagal\r\n    window.location.href = \"/login\";\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Menangani token expired atau error lainnya\r\napi.interceptors.response.use(\r\n  (response) => response, // Jika response sukses, lanjutkan\r\n  async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response?.status === 401) {\r\n      // Jika status 401 (Unauthorized), buka login window\r\n      openLoginWindow();\r\n      return Promise.reject(error);\r\n    }\r\n    // Jika token expired (misalnya status 403), coba refresh token\r\n    if (error.response?.status === 403 && !originalRequest._retry) {\r\n      originalRequest._retry = true;\r\n      try {\r\n        const newAccessToken = await refreshToken(); // Dapatkan token baru\r\n        // Perbarui permintaan dengan token baru dan ulangi\r\n        originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\r\n        return api(originalRequest); // Ulangi permintaan yang gagal\r\n      } catch (refreshError) {\r\n        return Promise.reject(refreshError); // Gagal refresh token\r\n      }\r\n    }\r\n\r\n    return Promise.reject(error); // Untuk error lainnya, tolak promise\r\n  }\r\n);\r\n\r\n\r\n// Fungsi untuk membuka jendela login\r\nexport const openLoginWindow = () => {\r\n  try {\r\n    // URL endpoint untuk halaman login\r\n    const loginUrl = \"/api/v1/login-window\";\r\n    window.open(loginUrl, \"_blank\", \"width=500,height=600\"); // Atur ukuran popup\r\n  } catch (error) {\r\n    console.error(\"Failed to open login window:\", error.message);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport default api;\r\n"
        }
    ]
}